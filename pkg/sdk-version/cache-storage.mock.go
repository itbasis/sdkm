// Code generated by MockGen. DO NOT EDIT.
// Source: cache-storage.go
//
// Generated by this command:
//
//	mockgen -source=cache-storage.go -package=sdkversion -destination=cache-storage.mock.go
//

// Package sdkversion is a generated GoMock package.
package sdkversion

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheStorage is a mock of CacheStorage interface.
type MockCacheStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCacheStorageMockRecorder
	isgomock struct{}
}

// MockCacheStorageMockRecorder is the mock recorder for MockCacheStorage.
type MockCacheStorageMockRecorder struct {
	mock *MockCacheStorage
}

// NewMockCacheStorage creates a new mock instance.
func NewMockCacheStorage(ctrl *gomock.Controller) *MockCacheStorage {
	mock := &MockCacheStorage{ctrl: ctrl}
	mock.recorder = &MockCacheStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheStorage) EXPECT() *MockCacheStorageMockRecorder {
	return m.recorder
}

// GoString mocks base method.
func (m *MockCacheStorage) GoString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoString indicates an expected call of GoString.
func (mr *MockCacheStorageMockRecorder) GoString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoString", reflect.TypeOf((*MockCacheStorage)(nil).GoString))
}

// Load mocks base method.
func (m *MockCacheStorage) Load(ctx context.Context) (MapSdkVersionGroupType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx)
	ret0, _ := ret[0].(MapSdkVersionGroupType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCacheStorageMockRecorder) Load(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCacheStorage)(nil).Load), ctx)
}

// Store mocks base method.
func (m *MockCacheStorage) Store(ctx context.Context, versions MapSdkVersionGroupType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", ctx, versions)
}

// Store indicates an expected call of Store.
func (mr *MockCacheStorageMockRecorder) Store(ctx, versions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCacheStorage)(nil).Store), ctx, versions)
}

// Validate mocks base method.
func (m *MockCacheStorage) Validate(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCacheStorageMockRecorder) Validate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCacheStorage)(nil).Validate), ctx)
}
