// Code generated by MockGen. DO NOT EDIT.
// Source: sdk-versions.go
//
// Generated by this command:
//
//	mockgen -source=sdk-versions.go -package=sdkversion -destination=sdk-versions.mock.go
//

// Package sdkversion is a generated GoMock package.
package sdkversion

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSDKVersions is a mock of SDKVersions interface.
type MockSDKVersions struct {
	ctrl     *gomock.Controller
	recorder *MockSDKVersionsMockRecorder
	isgomock struct{}
}

// MockSDKVersionsMockRecorder is the mock recorder for MockSDKVersions.
type MockSDKVersionsMockRecorder struct {
	mock *MockSDKVersions
}

// NewMockSDKVersions creates a new mock instance.
func NewMockSDKVersions(ctrl *gomock.Controller) *MockSDKVersions {
	mock := &MockSDKVersions{ctrl: ctrl}
	mock.recorder = &MockSDKVersionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKVersions) EXPECT() *MockSDKVersionsMockRecorder {
	return m.recorder
}

// AllVersions mocks base method.
func (m *MockSDKVersions) AllVersions(ctx context.Context, rebuildCache bool) (SdkVersionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllVersions", ctx, rebuildCache)
	ret0, _ := ret[0].(SdkVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllVersions indicates an expected call of AllVersions.
func (mr *MockSDKVersionsMockRecorder) AllVersions(ctx, rebuildCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllVersions", reflect.TypeOf((*MockSDKVersions)(nil).AllVersions), ctx, rebuildCache)
}

// GoString mocks base method.
func (m *MockSDKVersions) GoString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GoString indicates an expected call of GoString.
func (mr *MockSDKVersionsMockRecorder) GoString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoString", reflect.TypeOf((*MockSDKVersions)(nil).GoString))
}

// WithCache mocks base method.
func (m *MockSDKVersions) WithCache(cache Cache) SDKVersions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCache", cache)
	ret0, _ := ret[0].(SDKVersions)
	return ret0
}

// WithCache indicates an expected call of WithCache.
func (mr *MockSDKVersionsMockRecorder) WithCache(cache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCache", reflect.TypeOf((*MockSDKVersions)(nil).WithCache), cache)
}
