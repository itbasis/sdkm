// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go
//
// Generated by this command:
//
//	mockgen -source=plugin.go -package=plugin -destination=plugin.mock.go
//

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	io "io"
	reflect "reflect"

	env "github.com/itbasis/go-tools-core/env"
	sdkversion "github.com/itbasis/go-tools-sdkm/pkg/sdk-version"
	gomock "go.uber.org/mock/gomock"
)

// MockSDKMPlugin is a mock of SDKMPlugin interface.
type MockSDKMPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockSDKMPluginMockRecorder
	isgomock struct{}
}

// MockSDKMPluginMockRecorder is the mock recorder for MockSDKMPlugin.
type MockSDKMPluginMockRecorder struct {
	mock *MockSDKMPlugin
}

// NewMockSDKMPlugin creates a new mock instance.
func NewMockSDKMPlugin(ctrl *gomock.Controller) *MockSDKMPlugin {
	mock := &MockSDKMPlugin{ctrl: ctrl}
	mock.recorder = &MockSDKMPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKMPlugin) EXPECT() *MockSDKMPluginMockRecorder {
	return m.recorder
}

// Current mocks base method.
func (m *MockSDKMPlugin) Current(ctx context.Context, rebuildCache, onlyInstalled bool, baseDir string) (sdkversion.SDKVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current", ctx, rebuildCache, onlyInstalled, baseDir)
	ret0, _ := ret[0].(sdkversion.SDKVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockSDKMPluginMockRecorder) Current(ctx, rebuildCache, onlyInstalled, baseDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSDKMPlugin)(nil).Current), ctx, rebuildCache, onlyInstalled, baseDir)
}

// Env mocks base method.
func (m *MockSDKMPlugin) Env(ctx context.Context, rebuildCache, onlyInstalled bool, baseDir string) (env.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env", ctx, rebuildCache, onlyInstalled, baseDir)
	ret0, _ := ret[0].(env.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Env indicates an expected call of Env.
func (mr *MockSDKMPluginMockRecorder) Env(ctx, rebuildCache, onlyInstalled, baseDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockSDKMPlugin)(nil).Env), ctx, rebuildCache, onlyInstalled, baseDir)
}

// EnvByVersion mocks base method.
func (m *MockSDKMPlugin) EnvByVersion(ctx context.Context, version string) (env.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvByVersion", ctx, version)
	ret0, _ := ret[0].(env.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvByVersion indicates an expected call of EnvByVersion.
func (mr *MockSDKMPluginMockRecorder) EnvByVersion(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvByVersion", reflect.TypeOf((*MockSDKMPlugin)(nil).EnvByVersion), ctx, version)
}

// Exec mocks base method.
func (m *MockSDKMPlugin) Exec(ctx context.Context, rebuildCache bool, baseDir string, stdIn io.Reader, stdOut, stdErr io.Writer, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, rebuildCache, baseDir, stdIn, stdOut, stdErr, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockSDKMPluginMockRecorder) Exec(ctx, rebuildCache, baseDir, stdIn, stdOut, stdErr, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSDKMPlugin)(nil).Exec), ctx, rebuildCache, baseDir, stdIn, stdOut, stdErr, args)
}

// Install mocks base method.
func (m *MockSDKMPlugin) Install(ctx context.Context, rebuildCache bool, baseDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", ctx, rebuildCache, baseDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockSDKMPluginMockRecorder) Install(ctx, rebuildCache, baseDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockSDKMPlugin)(nil).Install), ctx, rebuildCache, baseDir)
}

// InstallVersion mocks base method.
func (m *MockSDKMPlugin) InstallVersion(ctx context.Context, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallVersion", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallVersion indicates an expected call of InstallVersion.
func (mr *MockSDKMPluginMockRecorder) InstallVersion(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallVersion", reflect.TypeOf((*MockSDKMPlugin)(nil).InstallVersion), ctx, version)
}

// LatestVersion mocks base method.
func (m *MockSDKMPlugin) LatestVersion(ctx context.Context, rebuildCache, onlyInstalled bool) (sdkversion.SDKVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestVersion", ctx, rebuildCache, onlyInstalled)
	ret0, _ := ret[0].(sdkversion.SDKVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestVersion indicates an expected call of LatestVersion.
func (mr *MockSDKMPluginMockRecorder) LatestVersion(ctx, rebuildCache, onlyInstalled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestVersion", reflect.TypeOf((*MockSDKMPlugin)(nil).LatestVersion), ctx, rebuildCache, onlyInstalled)
}

// LatestVersionByPrefix mocks base method.
func (m *MockSDKMPlugin) LatestVersionByPrefix(ctx context.Context, rebuildCache, onlyInstalled bool, prefix string) (sdkversion.SDKVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestVersionByPrefix", ctx, rebuildCache, onlyInstalled, prefix)
	ret0, _ := ret[0].(sdkversion.SDKVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestVersionByPrefix indicates an expected call of LatestVersionByPrefix.
func (mr *MockSDKMPluginMockRecorder) LatestVersionByPrefix(ctx, rebuildCache, onlyInstalled, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestVersionByPrefix", reflect.TypeOf((*MockSDKMPlugin)(nil).LatestVersionByPrefix), ctx, rebuildCache, onlyInstalled, prefix)
}

// ListAllVersions mocks base method.
func (m *MockSDKMPlugin) ListAllVersions(ctx context.Context, rebuildCache bool) (sdkversion.SdkVersionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllVersions", ctx, rebuildCache)
	ret0, _ := ret[0].(sdkversion.SdkVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllVersions indicates an expected call of ListAllVersions.
func (mr *MockSDKMPluginMockRecorder) ListAllVersions(ctx, rebuildCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllVersions", reflect.TypeOf((*MockSDKMPlugin)(nil).ListAllVersions), ctx, rebuildCache)
}

// ListAllVersionsByPrefix mocks base method.
func (m *MockSDKMPlugin) ListAllVersionsByPrefix(ctx context.Context, rebuildCache bool, prefix string) (sdkversion.SdkVersionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllVersionsByPrefix", ctx, rebuildCache, prefix)
	ret0, _ := ret[0].(sdkversion.SdkVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllVersionsByPrefix indicates an expected call of ListAllVersionsByPrefix.
func (mr *MockSDKMPluginMockRecorder) ListAllVersionsByPrefix(ctx, rebuildCache, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllVersionsByPrefix", reflect.TypeOf((*MockSDKMPlugin)(nil).ListAllVersionsByPrefix), ctx, rebuildCache, prefix)
}

// WithVersions mocks base method.
func (m *MockSDKMPlugin) WithVersions(versions sdkversion.SDKVersions) SDKMPlugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithVersions", versions)
	ret0, _ := ret[0].(SDKMPlugin)
	return ret0
}

// WithVersions indicates an expected call of WithVersions.
func (mr *MockSDKMPluginMockRecorder) WithVersions(versions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithVersions", reflect.TypeOf((*MockSDKMPlugin)(nil).WithVersions), versions)
}
